from math import atan, sin, cos, acos
from math import pi

DRONH = 0.84  # —Ä–∞–∑–º–µ—Ä—ã –¥—Ä–æ–Ω–∞. –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è
DRONW = 1  # —Ä–∞–∑–º–µ—Ä—ã –¥—Ä–æ–Ω–∞. –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è
DRONL = 3  # —Ä–∞–∑–º–µ—Ä—ã –¥—Ä–æ–Ω–∞. –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è

start_coord = [0, 0, 0]  # –∫–æ—Ä–æ—Ä–¥–∏–Ω–∞—Ç—ã: –Ω–∞—á–∞–ª—å–Ω–∞—è, –∫–æ–Ω–µ—á–Ω–∞—è –∏ –¥—Ä–æ–Ω–∞
dron_coord = [0, 0, 0]  # –∫–æ—Ä–æ—Ä–¥–∏–Ω–∞—Ç—ã: –Ω–∞—á–∞–ª—å–Ω–∞—è, –∫–æ–Ω–µ—á–Ω–∞—è –∏ –¥—Ä–æ–Ω–∞
end_coord = [0, 70, 0]  # –∫–æ—Ä–æ—Ä–¥–∏–Ω–∞—Ç—ã: –Ω–∞—á–∞–ª—å–Ω–∞—è, –∫–æ–Ω–µ—á–Ω–∞—è –∏ –¥—Ä–æ–Ω–∞
dron_degr = 0  # —É–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞ –¥—Ä–æ–Ω–∞
past_dist = 0  # —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ —Å –¥–∞—Ç—á–∏–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∏ –Ω—ã–Ω–µ—à–Ω–µ–µ
dist = 0  # —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ —Å –¥–∞—Ç—á–∏–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∏ –Ω—ã–Ω–µ—à–Ω–µ–µ

'''–ö—Ä–∞—Ç–∫–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ. –¥–∞–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º - —Ä–∞–±–æ—Ç–∞–µ—Ç. —ç—Ç–æ —É–∂–µ —Ö–æ—Ä–æ—à–æ.  Ã∂–üÃ∂–ªÃ∂–æÃ∂—ÖÃ∂–æÃ∂ Ã∂—ÇÃ∂–æÃ∂ Ã∂—áÃ∂—ÇÃ∂–æÃ∂ Ã∂–æÃ∂–ΩÃ∂ Ã∂–ΩÃ∂–µÃ∂ Ã∂—ÉÃ∂—áÃ∂–∏Ã∂—ÇÃ∂—ãÃ∂–≤Ã∂–∞Ã∂–µÃ∂—ÇÃ∂ Ã∂—ÅÃ∂–≤Ã∂–æÃ∂–∏Ã∂ Ã∂–≥Ã∂–∞Ã∂–±Ã∂–∞Ã∂—ÄÃ∂–∏Ã∂—ÇÃ∂—ãÃ∂. 
–¢–∞–∫–∂–µ –≤ —ç—Ç–æ–º —Ñ–∞–π–ª–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å - –¥—Ä–æ–Ω —Å—Ç—Ä–µ–º–∏—Ç—Å—è –≤—Å–µ–≥–¥–∞ –±—ã—Ç—å –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ 0.7 –º–µ—Ç—Ä–æ–≤ –æ—Ç —Å—Ç–µ–Ω—ã, 
–∫–æ–≥–¥–∞ –µ–µ –≤–∏–¥–∏—Ç (—è –ø–æ–º–µ—Ç–∏–ª #!). –∞–ª–≥–æ—Ä–∏—Ç–º –¥–≤–∏–∂–µ–Ω–∏—è —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª–æ –ø—Ä–∞–≤–æ–π —Ä—É–∫–∏, —Ç.–µ. –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç –Ω–µ–≥–æ –∂–¥–∞—Ç—å 
–Ω–µ –Ω–∞–¥–æ –∏ –≤–ø–æ–ª–Ω–µ –≤–æ–∑–º–æ–∂–Ω–æ —á—Ç–æ –º–æ–∂–Ω–æ –∑–∞–≥–Ω–∞—Ç—å –≤ –≤–µ—á–Ω—ã–π —Ü–∏–∫–ª. Ã∂ Ã∂–µÃ∂—ÅÃ∂–ªÃ∂–∏Ã∂ Ã∂—ÖÃ∂–æÃ∂—ÇÃ∂–∏Ã∂—ÇÃ∂–µÃ∂ Ã∂—ÇÃ∂–µÃ∂—ÅÃ∂—ÇÃ∂–∏Ã∂—ÄÃ∂–æÃ∂–≤Ã∂–∞Ã∂—ÇÃ∂—åÃ∂ Ã∂–øÃ∂–æÃ∂—ÅÃ∂—ÇÃ∂–∞Ã∂–≤Ã∂—åÃ∂—ÇÃ∂–µÃ∂ Ã∂–≤Ã∂ Ã∂—ÑÃ∂–∞Ã∂–πÃ∂–ªÃ∂–µÃ∂ Ã∂ Ã∂sÃ∂iÃ∂mÃ∂_Ã∂sÃ∂hÃ∂oÃ∂wÃ∂.Ã∂pÃ∂yÃ∂
Ã∂SÃ∂UÃ∂BÃ∂PÃ∂OÃ∂IÃ∂NÃ∂TÃ∂SÃ∂ Ã∂=Ã∂ Ã∂[Ã∂(Ã∂0Ã∂,Ã∂ Ã∂0Ã∂,Ã∂ Ã∂0Ã∂)Ã∂]Ã∂ Ã∂ Ã∂–∏Ã∂–ªÃ∂–∏Ã∂ Ã∂–¥Ã∂—ÄÃ∂–æÃ∂–ΩÃ∂ Ã∂—ÄÃ∂–∞Ã∂–∑Ã∂–æÃ∂–±Ã∂—åÃ∂–µÃ∂—ÇÃ∂—ÅÃ∂—èÃ∂. —Ñ—É–Ω–∫—Ü–∏–∏ Step, Round, Find_dist –±—ã–ª–∏ –≤–∑—è—Ç—ã –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –∏ 
–∏–∑–º–µ–Ω–µ–Ω—ã –Ω–µ –±—ã–ª–∏. —Ä–∞–±–æ—Ç–∞—é—Ç –∏–±–æ –ª–æ–º–∞—Ç—å—Å—è —Ç–∞–º —É–∂–µ –Ω–µ—á–µ–º—É. —Ñ—É–Ω–∫—Ü–∏–∏ length –∏ Shortest_route –±—ã–ª–∏ –Ω–∞–ø–∏—Å–∞–Ω—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –º–Ω–æ—é –∏ 
–º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã. –õ–µ–∑—Ç—å –ù–ï –Ω–∞–¥–æ. –§—É–Ω–∫—Ü–∏–∏ It_is_finish –∏ Adjust –±—ã–ª–∏ –º–Ω–æ—é –∂–µ —á–∞—Å—Ç–∏—á–Ω–æ –ø–µ—Ä–µ–ø–∏—Å–∞–Ω—ã. –∑–∞ It_is_finish 
—Ç–∞–∫–∂–µ —Ä—É—á–∞—é—Å—å. Adjust —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –∏–∑-–∑–∞ –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏ –¥–∞—Ç—á–∏–∫–∞ –¥–∞–µ—Ç —Ä–∞–∑–±—Ä–æ—Å –¥–æ 10 –≥—Ä–∞–¥—É—Å–æ–≤. —Ç–∞–∫–∂–µ –µ—Å—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —á—Ç–æ –≤ 
–æ—á–µ–Ω—å —É–∑–∫–∏—Ö –∫–æ—Ä–∏–¥–æ—Ä–∞—Ö –¥—Ä–æ–Ω –∏–∑-–∑–∞ –Ω–µ–µ–µ –≤—Ä–µ–∂–µ—Ç—Å—è (—Å–º #!). –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç —à–∏—Ä–∏–Ω—É –ø—Ä–æ—Ö–æ–¥–∞. in_line. –Ω–∞–ø–∏—Å–∞–Ω–∞ –º–Ω–æ—é –æ—Ç –∏ –¥–æ. 
–ò–∑-–∑–∞ –µ–µ –ø—Ä–æ—Å—Ç–æ—Ç—ã –±–∞–≥–æ–≤ —Ç–∞–º –±—ã—Ç—å –Ω–µ –¥–æ–ª–∂–Ω–æ, –Ω–æ –µ—Å–ª–∏ —Å–ª—É—á–∞—Ç—Å—è –ø–µ—Ä–≤—ã–º –¥–µ–ª–æ–º —Å–º–æ—Ç—Ä–∏—Ç–µ sh <= 0. Look_forward - –æ–ø—è—Ç—å –∂–µ –º–æ—è. 
–Ω–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∏ —Ä–∞–∑—É.'''


def Step(x):  # –¥–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä–µ–¥
    dron_coord[0] += x * sin(dron_degr / 180 * pi)  # –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    dron_coord[1] += x * cos(dron_degr / 180 * pi)  # –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    with open("log.txt", "a") as file:  # –∑–∞–ø–∏—Å–∞—Ç—å –≤ —Ñ–∞–π–ª –∫–æ–º–∞–Ω–¥—É –Ω–∞ –¥–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä–µ–¥
        file.write(f"B move({x})\n")  # –∑–∞–ø–∏—Å–∞—Ç—å –≤ —Ñ–∞–π–ª –∫–æ–º–∞–Ω–¥—É –Ω–∞ –¥–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä–µ–¥
    Find_dist()  # –æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞


def Round(x):  # –ø–æ–≤–æ—Ä–æ—Ç
    global dron_degr  # –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω—É –≥—Ä–∞–¥—É—Å–∞
    dron_degr += x  # –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω—É –≥—Ä–∞–¥—É—Å–∞
    with open("log.txt", "a") as file:  # –∑–∞–ø–∏—Å–∞—Ç—å –≤ —Ñ–∞–π–ª –∫–æ–º–∞–Ω–¥—É –Ω–∞ –ø–æ–≤–æ—Ä–æ—Ç
        file.write(f"B rotate({x})\n")  # –∑–∞–ø–∏—Å–∞—Ç—å –≤ —Ñ–∞–π–ª –∫–æ–º–∞–Ω–¥—É –Ω–∞ –ø–æ–≤–æ—Ä–æ—Ç
    Find_dist()  # –æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞


def Find_dist():  # –æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
    global past_dist  # –∑–∞–ø–∏—Å—å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    global dist  # –∑–∞–ø–∏—Å—å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    past_dist = dist  # –∑–∞–ø–∏—Å—å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    f = True  # —Ñ–ª–∞–≥ - –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–∞ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏–µ —Ü–∏–∫–ª–∞
    while f:
        with open('log.txt') as file:  # –æ—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞
            end = file.readlines()[-1]   # —Å—á–∏—Ç—ã–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–∏
            if end[0] == 'S':  # –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —ç—Ç–æ –æ—Ç–≤–µ—Ç
                dist = round(float(end[1:]), 2)  # –∑–∞–ø–∏—Å—å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è. –æ–∫—Ä—É–≥–ª—è–µ—Ç—Å—è —Ç.–∫. —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–∞—Ç—á–∏–∫–∞ 1 —Å–º
                f = False  # –æ–ø—É—Å–∫–∞–µ–º —Ñ–ª–∞–≥ - –≤—ã—Ä—É–±–∞–µ–º —Ü–∏–∫–ª


def It_is_finish():  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–∏–Ω–∏—à
    if length(dron_coord, end_coord) <= 2:  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥—Ä–æ–Ω–æ–º –∏ –∫–æ–Ω—Ü–æ–º
        return 1
    else:
        return 0


def Adjust(st_degr=10):  # –≤—Å—Ç–∞—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—é . –Ω–µ —Å—Ç–∞–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä –º–µ–Ω—å—à–µ 10
    if st_degr == 0:  # –µ—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä 0
        Adjust(-10)  # –µ—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä 0
        return  # –µ—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä 0
    Round(st_degr)  # –ø–æ–≤–æ—Ä–æ—Ç - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á—Ç–æ —Å–ø—Ä–∞–≤–∞
    otr = round((dist ** 2 + past_dist ** 2 - 2 * dist * past_dist * cos(st_degr / 180 * pi)) ** 0.5, 2)  # –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ
    #                                                                                       —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏,
    #                                                                                       –∑–∞–º–µ—á–µ–Ω–Ω—ã–º–∏ —Å–∫–∞–Ω–µ—Ä–æ–º
    degr = 180 - acos((otr ** 2 + past_dist ** 2 - dist ** 2) / (2 * otr * past_dist)) / pi * 180  # –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —É–≥–ª–∞ –Ω–∞
    #                                                                                    –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø–æ–≤–µ—Ä–Ω—É—Ç—å—Å—è —á—Ç–æ–±—ã
    #                                                                                    —Å—Ç–∞—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–º
    if dist == -1:  # –µ—Å–ª–∏ —Å–ø—Ä–∞–≤–∞ –Ω–∏—á–µ–≥–æ - –≤—Å—Ç–∞–µ–º –≤ –ø—Ä–µ–∂–Ω—é—é –ø–æ–∑–∏—Ü–∏—é –∏ –¥–≤–∏–∂–∏–º—Å—è
        Round(-st_degr)  # –≤—Å—Ç–∞—Ç—å –≤ –ø—Ä–µ–∂–Ω—é—é –ø–æ–∑–∏—Ü–∏—é
        Round(90)  # –≤—Å—Ç–∞—Ç—å –≤ –ø—Ä–µ–∂–Ω—é—é—é –ø–æ–∑–∏—Ü–∏—é
        Step(1)  # –≤–ø–µ—Ä–µ–¥! –∏ —Å –ø–µ—Å–Ω–µ–π
    else:
        Round(-st_degr)  # –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º—Å—è –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
        Round(degr)  # –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º—Å—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        step = 1  # –Ω–∞ —Å–∫–æ–ª—å–∫–æ –º –¥–≤–∏–∂–∏–º—Å—è
        if Look_forward(step):  # –µ—Å–ª–∏ –ø—Ä–æ—Ö–æ–¥ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —à–∏—Ä–æ–∫
            Step(step)  # –¥–≤–∏–∂–∏–º—Å—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            Round(-90)  # #!! –≤—Å—Ç–∞–µ–º —É—Å–ª–æ–≤–Ω–æ-–ø–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä–Ω–æ (—É–≥–æ–ª –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è –Ω–µ—Ç–æ—á–Ω–æ –∏–∑-–∑–∞ –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏ –¥–∞—Ç—á–∏–∫–∞)
            if 0 < dist:  # #!        –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ
                Step(dist - 0.7)  # #!  –≤—Å—Ç–∞–µ–º –∫ —Å—Ç–µ–Ω–µ –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ 0.7 –º
        else:
            Round(-degr+90)  # –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –ø—Ä–µ–∂–Ω–µ–º—É –ø—Ä—è–ø—è—Ç—Å—Ç–≤–∏—é
            Step(1)  # –æ–ø—è—Ç—å –∂–µ –≤–ø–µ—Ä–µ–¥


def Shortest_route():  # —É–≥–æ–ª –¥–æ –∫–æ–Ω–µ—á–Ω–æ–π —Ç–æ—á–∫–∏. —Ä–∞–±–æ—Ç–∞–µ—Ç. –Ω–µ —Ç—Ä–æ–≥–∞–π—Ç–µ üôèüôè
    chetvert = ''
    x0, y0 = end_coord[:2]  # –≤–≤–æ–¥ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–æ–¥ –¥—Ä—É–≥–∏–º –∏–º–µ–Ω–µ–º - –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑ –¥—Ä—É–≥–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    cx, cy = dron_coord[:2]  # –≤–≤–æ–¥ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–æ–¥ –¥—Ä—É–≥–∏–º –∏–º–µ–Ω–µ–º - –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑ –¥—Ä—É–≥–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    if x0 > cx and y0 >= cy:  # –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —á–µ—Ç–≤–µ—Ä—Ç–∏
        chetvert = 'I'  # –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —á–µ—Ç–≤–µ—Ä—Ç–∏
    elif x0 > cx and y0 < cy:  # –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —á–µ—Ç–≤–µ—Ä—Ç–∏
        chetvert = 'IV'  # –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —á–µ—Ç–≤–µ—Ä—Ç–∏
    elif y0 >= cy:  # –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —á–µ—Ç–≤–µ—Ä—Ç–∏
        chetvert = 'II'  # –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —á–µ—Ç–≤–µ—Ä—Ç–∏
    else:  # –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —á–µ—Ç–≤–µ—Ä—Ç–∏
        chetvert = 'III'  # –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —á–µ—Ç–≤–µ—Ä—Ç–∏
    try:
        angle_f = -atan((y0 - cy) / (x0 - cx)) + pi / 2  # –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —É–≥–ª–∞
        if chetvert in ['I', 'IV']:  # –∫–æ–º–ø–µ–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π —Ç–∞–Ω–≥–µ–Ω—Å–∞
            pass  # –∫–æ–º–ø–µ–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π —Ç–∞–Ω–≥–µ–Ω—Å–∞
        else:  # –∫–æ–º–ø–µ–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π —Ç–∞–Ω–≥–µ–Ω—Å–∞
            angle_f = angle_f + pi  # –∫–æ–º–ø–µ–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π —Ç–∞–Ω–≥–µ–Ω—Å–∞
    except ZeroDivisionError:  # –µ—Å–ª–∏ –∏–∫—Å—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç
        if chetvert == 'II':  # –µ—Å–ª–∏ –∏–∫—Å—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç
            angle_f = 0  # –µ—Å–ª–∏ –∏–∫—Å—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç
        else:  # –µ—Å–ª–∏ –∏–∫—Å—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç
            angle_f = pi  # –µ—Å–ª–∏ –∏–∫—Å—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç

    angle_f = angle_f / pi * 180
    if angle_f > 180:
        angle_f = angle_f - 360
    return angle_f  # –≤–æ–∑–≤—Ä–∞—Ç —É–≥–ª–∞ –≤ –≥—Ä–∞–¥—É—Å–∞—Ö


def Look_forward(rasst=1):  # —Å–º–æ—Ç—Ä–∏–º –≤–ª–µ–∑–µ–º –ª–∏ –µ—Å–ª–∏ –ø—Ä–∞–≤—ã–π –±–æ–∫ –ø–∞—Ä–∞–ª–ª–µ–ª–µ–Ω
    ang = atan(DRONH / DRONW)  # —É–≥–æ–ª –¥—Ä–æ–Ω–∞
    Round(ang / pi * 180)  # –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –∫—Ä–∞–π–Ω—é—é –ª–µ–≤—É—é —Ç–æ—á–∫—É
    raast2 = dist  # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è
    Round(-ang / pi * 180)  # –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –ø—Ä–µ–∂–Ω–∏–π —É–≥–æ–ª
    if raast2 == -1:  # –µ—Å–ª–∏ –ø—É—Å—Ç–æ —Ç–æ —Ç–æ—á–Ω–æ –≤–ª–µ–∑–µ–º
        return True  # –µ—Å–ª–∏ –ø—É—Å—Ç–æ —Ç–æ —Ç–æ—á–Ω–æ –≤–ª–µ–∑–µ–º
    return raast2 * cos(ang) >= rasst + 0.2  # –µ—Å–ª–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –±–æ–ª—å—à–µ —Ç–æ–≥–æ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –º—ã –¥–≤–∏–≥–∞–µ–º—Å—è - —Ç–æ –≤–ª–µ–∑–µ–º


def length(p1, p2):  # –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏. —Ä–∞–±–æ—Ç–∞–µ—Ç!!
    s = 0  # –≤–≤–µ–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    for i in range(len(p1)):  # –ø–µ—Ä–µ–±–æ—Ä –∏–Ω–¥–µ–∫—Å–æ–≤
        s += (p1[i] - p2[i]) ** 2  # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ —Ä–∞–∑–Ω–æ—Å—Ç–µ–π
    return s ** 0.5  # –≤—ã–≤–æ–¥ –∫–æ—Ä–Ω—è —Å—É–º–º—ã


def in_line():  # –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –æ—Ç –¥—Ä–æ–Ω–∞ –¥–æ –ª–∏–Ω–∏–∏ —Å—Ç–∞—Ä—Ç-–∫–æ–Ω–µ—Ü
    l1 = length(dron_coord, start_coord)  # –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥—Ä–æ–Ω-—Å—Ç–∞—Ä—Ç
    l2 = length(dron_coord, end_coord)  # –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥—Ä–æ–Ω-–∫–æ–Ω–µ—Ü
    l3 = length(start_coord, end_coord)  # –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è —Å—Ç—Ä–∞—Ç-–∫–æ–Ω–µ—Ü

    p = (l1 + l2 + l3) / 2  # –ø–æ–ª—É–ø–µ—Ä–∏–º–µ—Ç—Ä
    sh = (p * (p - l1) * (p - l2) * (p - l3))  # –∫–≤–∞–¥—Ä–∞—Ç –ø–ª–æ—â–∞–¥–∏ –ì–µ—Ä–æ–Ω–∞
    if sh <= 0:  # –µ—Å–ª–∏ –ø–ª–æ—â–∞–¥—å –º–µ–Ω—å—à–µ –Ω—É–ª—è - –ø–æ–Ω—è—Ç—å –Ω–µ –º–æ–≥—É –∫–∞–∫ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ - –Ω–æ –µ—Å—Ç—å
        return True  # –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç
    sh **= 0.5  # –∏–Ω–∞—á–µ –∏–∑–≤–ª–µ–∫–∞–µ–º –∫–æ—Ä–µ–Ω—å –∏–∑ –ø–ª–æ—â–∞–¥–∏

    h_real = sh * 2 / l3  # –∏ –≤—ã—á–∏—Å–ª—è–µ–º –≤—ã—Å–æ—Ç—É

    return h_real < 2  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ç–∏–Ω—É –µ—Å–ª–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–Ω—å—à–µ 2 –º


if __name__ == '__main__':  # –µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω —ç—Ç–æ—Ç —Ñ–∞–π–ª
    Round(Shortest_route() - dron_degr)  # –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º—Å—è –∫ —Ü–µ–ª–∏
    Run = True  # –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ü–∏–∫–ª–∞
    while Run:  # —Å–∞–º —Ü–∏–∫–ª
        if (dist >= 3 or dist == -1) and not in_line():  # –µ—Å–ª–∏ –≤–ø–µ—Ä–µ–¥–∏ –ø—É—Å—Ç–æ –∏ –º—ã –Ω–µ –Ω–∞ –Ω–∞ –ª–∏–Ω–∏–∏ —Å—Ç–∞—Ä—Ç-–∫–æ–Ω–µ—Ü
            Round(Shortest_route() - dron_degr)  # –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º—Å—è
        if dist >= 3 or dist == -1:  # –µ—Å–ª–∏ –≤–ø–µ—Ä–µ–¥–∏ –ø—É—Å—Ç–æ
            if It_is_finish():  # –µ—Å–ª–∏ –º—ã –≤ –∫–æ–Ω—Ü–µ –≤—Ä–µ–º–µ–Ω –∏ –∫–∞—Ä—Ç—ã
                Run = False  # –æ–ø—É—Å–∫–∞–µ–º —Ñ–ª–∞–≥
                with open('log.txt', 'a') as file:  # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —á—Ç–æ –ø–æ–±–µ–¥–∏–ª–∏
                    print('B Finish()', file=file)  # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —á—Ç–æ –ø–æ–±–µ–¥–∏–ª–∏
                break  # –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª (—Ñ–ª–∞–≥ –∑–¥–µ—Å—å –Ω–µ –Ω—É–∂–µ–Ω... —É–¥–∞–ª—è–π—Ç–µ —Å–∞–º–∏, –º–Ω–µ –ª–µ–Ω—å)

            Step(1)  # –¥–≤–∏–∂–∏–º—Å—è –≤–ø–µ—Ä–µ–¥ –Ω–µ –±–æ–ª–µ–µ 2
        else:  # –∏–Ω–∞—á–µ
            Adjust()  # –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª–æ –ø—Ä–∞–≤–æ–π —Ä—É–∫–∏
